<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Olin Gay - Blog</title><link>http://olinbg.com/</link><description></description><lastBuildDate>Sat, 14 May 2016 07:08:00 -0400</lastBuildDate><item><title>Setting Timezone in Bash for Windows</title><link>http://olinbg.com/posts/timezone-in-bfw.html</link><description>&lt;p&gt;Really quick and easy change, but one that didn't work correctly on my &lt;a href="http://olinbg.com/posts/pelican-python-bash.html"&gt;initial Bash for Windows install&lt;/a&gt; - timezone!&lt;/p&gt;
&lt;p&gt;Initially I was getting UTC from &lt;em&gt;date&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;date &amp;quot;+%Y-%m-%d %H:%M:%S&amp;quot;
2016-05-14 11:11:00
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A single link will allow Bash For Windows to pick up the right timezone.  In my case, I'm looking for EST (New York):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo ln -sf /usr/share/zoneinfo/America/New_York /etc/localtime
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Running date again:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;date &amp;quot;+%Y-%m-%d %H:%M:%S&amp;quot;
2016-05-14 07:12:21
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To see the other timezones available:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd /usr/share/zoneinfo
ls -l
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Olin Gay</dc:creator><pubDate>Sat, 14 May 2016 07:08:00 -0400</pubDate><guid isPermaLink="false">tag:olinbg.com,2016-05-14:posts/timezone-in-bfw.html</guid></item><item><title>Publish Pelican to GitHub from Bash for Windows</title><link>http://olinbg.com/posts/pelican-to-gh-bfw.html</link><description>&lt;p&gt;&lt;em&gt;(You probably want to review &lt;a href="http://olinbg.com/posts/pelican-python-bash.html"&gt;my earlier post on setting up Python and Pelican&lt;/a&gt;, and if you haven't already, &lt;a href="http://olinbg.com/posts/ssh-key-github-bfw.html"&gt;set up ssh keys as well&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There are a number of places to publish a Pelican site, but I was immediately drawn to &lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Free to use&lt;/li&gt;
&lt;li&gt;Integrates with your existing Github account&lt;/li&gt;
&lt;li&gt;Natively supports static sites, like Jekyll and Pelican&lt;/li&gt;
&lt;li&gt;Easy to automate on the command line&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;a href="http://docs.getpelican.com/en/latest/quickstart.html"&gt;documentation quickstart for Pelican&lt;/a&gt; helps you get a site built.  But how do you publish this site up to github pages?&lt;/p&gt;
&lt;h3&gt;Ensure the site builds and displays&lt;/h3&gt;
&lt;p&gt;Fire up Bash for Windows and change to your site directory.  Assuming you're using the makefile, run &lt;em&gt;make server&lt;/em&gt; to create your output directory and load it in your local browser.  For my site:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd olinbg
make serve
(site is now running at http://localhost:8000)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If &lt;a href="http://localhost:8000"&gt;the localhost link renders&lt;/a&gt;, you're ready to upload.&lt;/p&gt;
&lt;h3&gt;Create the repo&lt;/h3&gt;
&lt;p&gt;Start with the guide right on the &lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt; site.  From their current guide:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Create a repo" src="http://olinbg.com/images/2016-05-14/repo.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Initial push&lt;/h3&gt;
&lt;p&gt;Before you push all the content, copy your site content into the &lt;em&gt;username.github.io&lt;/em&gt; directory, then push the content.  In Bash for Windows (replace &lt;em&gt;username&lt;/em&gt; and &lt;em&gt;your_pelican_output_dir&lt;/em&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cp -r output username.github.io
cd username.github.io
git add --all
git commit -m &amp;quot;Initial commit&amp;quot;
git push -u origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Edit description&lt;/h3&gt;
&lt;p&gt;After pushing your first content, head over to your repo on github.  You'll see a github pages header where you can set a description and site address (should match your address from earlier):&lt;/p&gt;
&lt;p&gt;&lt;img alt="Edit" src="http://olinbg.com/images/2016-05-14/edit.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Test the page&lt;/h3&gt;
&lt;p&gt;Now navigate to the actual page: &lt;em&gt;username.github.io&lt;/em&gt;.  You should see your start Pelican content.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Site" src="http://olinbg.com/images/2016-05-14/site.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Adding a README&lt;/h3&gt;
&lt;p&gt;I wanted to ensure my github repo had a README added (standard practice).  Rather than ignore this in the output directory that's uploaded to github, I added this as file to copy in my pelicanconf.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir content/files
touch content/files/README.md
(edit the README with content)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now add the following to your pelican configuration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;EXTRA_PATH_METADATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;files/README.md&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;README.md&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Uploading your 'content' directory&lt;/h3&gt;
&lt;p&gt;You can follow similar steps using git to upload your 'content' folder.  This is advisable so you have a working repo as you edit your site.  Instructions are more straightforward here - simply create a new repo for you source content, and follow the "Initial push" instructions above.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Olin Gay</dc:creator><pubDate>Sat, 14 May 2016 06:37:00 -0400</pubDate><guid isPermaLink="false">tag:olinbg.com,2016-05-14:posts/pelican-to-gh-bfw.html</guid></item><item><title>Helpful Pelican Settings</title><link>http://olinbg.com/posts/helpful-pelican-settings.html</link><description>&lt;p&gt;Pelican (the static site generator that powers this site) has a number of useful settings that can change how sites are generated and displayed.  A few of these I didn't find right away - they might've been missing from pelican-quickstart or not obviously documented.  In no particular order:&lt;/p&gt;
&lt;h3&gt;EXTRA_PATH_METADATA&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Values used on this site&lt;/span&gt;
&lt;span class="n"&gt;EXTRA_PATH_METADATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;files/github/.nojekyll&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.nojekyll&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;files/github/CNAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;CNAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;files/github/README.md&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;README.md&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This setting allows you to copy either paths or files directly into your output directory in Pelican.  This solves an important problem when using static hosting on sites like github pages: maintaining repository files as your site generates.&lt;/p&gt;
&lt;p&gt;In the example above, the &lt;em&gt;CNAME&lt;/em&gt;, &lt;em&gt;README&lt;/em&gt; and &lt;em&gt;.nojekyll&lt;/em&gt; configuration files are copied into the top output directory.  I can then commit those on uplaod to gh-pages.&lt;/p&gt;
&lt;h3&gt;ARTICLE_URL and ARTICLE_SAVE_AS&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Values used on this site&lt;/span&gt;
&lt;span class="n"&gt;ARTICLE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;posts/{slug}.html&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;ARTICLE_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;posts/{slug}.html&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I wasn't as pleased with the output format of the default pelican setup, which dumps posts into the top-level directory.  The example formats the posts into a 'posts' directory using &lt;em&gt;ARTICLE_URL&lt;/em&gt;, keeping the top-level cleaner.  You could also add YYYYMMDD or tags into the post path here, and &lt;em&gt;SAVE_AS&lt;/em&gt; variant can change the location of the output file.&lt;/p&gt;
&lt;h3&gt;DELETE_OUTPUT_DIRECTORY and OUTPUT_RETENTION&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;DELETE_OUTPUT_DIRECTORY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;OUTPUT_RETENTION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.git&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.gitignore&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To ensure a clean build before publishing, you can use &lt;em&gt;DELETE_OUTPUT_DIRECTORY&lt;/em&gt;.  However, this was wiping out my .git directory each time.  I tracked down the &lt;em&gt;OUTPUT_RETENTION&lt;/em&gt; setting, that ensures on delete the files / paths listed stay intact.&lt;/p&gt;
&lt;h3&gt;FEED_ALL_RSS&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;FEED_ALL_RSS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;feeds/all.rss.xml&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The Pelican install by default had only enabled an ATOM feed, but not RSS.  The &lt;em&gt;FEED_ALL_RSS&lt;/em&gt; setting does what it says, generating the feed in the path provided.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Olin Gay</dc:creator><pubDate>Thu, 12 May 2016 22:52:00 -0400</pubDate><guid isPermaLink="false">tag:olinbg.com,2016-05-12:posts/helpful-pelican-settings.html</guid></item><item><title>Python and Pelican on Bash for Windows</title><link>http://olinbg.com/posts/pelican-python-bash.html</link><description>&lt;p&gt;This site is up and running after setting up &lt;a href="https://msdn.microsoft.com/en-us/commandline/wsl/about"&gt;Bash for Ubuntu for Windows&lt;/a&gt; and &lt;a href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;.  There are a few issues on Bash for Windows right now, but seeing Ubuntu's command-line capabilities on Windows 10 is eye-opening for long-time Windows users.&lt;/p&gt;
&lt;h2&gt;Installing Bash for Windows&lt;/h2&gt;
&lt;p&gt;You'll need &lt;a href="https://insider.windows.com/"&gt;Windows Insider&lt;/a&gt; enabled on Windows 10 64-bit, and also &lt;a href="https://msdn.microsoft.com/en-us/windows/uwp/get-started/enable-your-device-for-development"&gt;developer features&lt;/a&gt; set for Windows updates.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/36352627/how-to-enable-bash-in-windows-10-developer-preview"&gt;This post on StackOverflow&lt;/a&gt; was also helpful.&lt;/p&gt;
&lt;p&gt;You should now have the right Windows build (at least 14316):&lt;/p&gt;
&lt;p&gt;&lt;img alt="About" src="http://olinbg.com/images/2016-05-06/about.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Windows Build" src="http://olinbg.com/images/2016-05-06/build.png" /&gt;&lt;/p&gt;
&lt;p&gt;The Bash subsystem installation is straightforward.  I followed Microsoft's guide &lt;a href="https://blogs.msdn.microsoft.com/commandline/2016/04/06/bash-on-ubuntu-on-windows-download-now-3/"&gt;here&lt;/a&gt;, on the Windows Command Line blog.&lt;/p&gt;
&lt;p&gt;Fire up Bash, and you've got a blinking cursor.&lt;/p&gt;
&lt;h2&gt;Installing Python&lt;/h2&gt;
&lt;p&gt;The Python installation is far less involved, though you'll need to install directly (sudo apt-get) rather than using a virtual environment.  This is due to an issue around symlinks in Bash for Windows (details are &lt;a href="https://github.com/Microsoft/BashOnWindows/issues/201"&gt;here&lt;/a&gt;).  &lt;strong&gt;UPDATE&lt;/strong&gt; - looks like the fix is in the latest build, give it a shot!&lt;/p&gt;
&lt;p&gt;The following command gets python and pip up and running.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install python3-pip
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Similar for git:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The magic of Bash for windows - no Cygwin installation required here.&lt;/p&gt;
&lt;h2&gt;Installing Pelican&lt;/h2&gt;
&lt;p&gt;If you're interested in Pelican, the installation should also be easy with python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo pip install pelican markdown six
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, &lt;em&gt;this didn't work in Bash for Windows&lt;/em&gt;, again due to issues around filesystem errors and links (&lt;a href="http://stackoverflow.com/questions/36842969/python-3-pip-packages-install-on-ubuntu-on-windows-failing-with-errno-22"&gt;this StackOverflow&lt;/a&gt; got closest to my issue).&lt;/p&gt;
&lt;p&gt;What ended up working is running each of the install commands individually, because the packaging step at the end is failing.  It's a major hack, but got me up and running for now.  If this isn't addressed in the next developer build, I'll file an issue for it.&lt;/p&gt;
&lt;p&gt;Once Pelican is up and running, I recommend the &lt;a href="http://docs.getpelican.com/en/latest/quickstart.html"&gt;documentation quickstart&lt;/a&gt; as a first step.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Olin Gay</dc:creator><pubDate>Fri, 06 May 2016 18:40:00 -0400</pubDate><guid isPermaLink="false">tag:olinbg.com,2016-05-06:posts/pelican-python-bash.html</guid></item><item><title>Generating SSH Keys for Github on Bash for Windows</title><link>http://olinbg.com/posts/ssh-key-github-bfw.html</link><description>&lt;p&gt;If you'd rather not share SSH keys between your standard Windows installation and Bash for Windows, you can use the built-in key generator from Ubuntu to generate your ssh keys.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh-keygen -t rsa
Generating public/private rsa key pair.
Enter file in which to save the key (path): &amp;lt;type&amp;gt;
Enter passphrase (empty for no passphrase): &amp;lt;type&amp;gt;
Enter same passphrase again:
Your identification has been saved
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You'll have both a public and private key in your home directory.  If you want to upload your public key elsewhere, first dump it to the console (assuming you used the default path):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat ~/.ssh/id_rsa.pub
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You'll see:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh-rsa &amp;lt;key text&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Select everything before your machine name on the last line and press Ctrl+C to copy.  Open &lt;a href="https://github.com/settings/profile"&gt;your profile settings&lt;/a&gt; on GitHub, navigate to "SSH and GPG Keys", and paste in your ssh-rsa key:&lt;/p&gt;
&lt;p&gt;&lt;img alt="SSH settings in GitHub" src="http://olinbg.com/images/2016-05-06/github.png" /&gt;&lt;/p&gt;
&lt;p&gt;You'll get a notification that the key hasn't been used yet.  Clone a repo, and you're ready to go.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Olin Gay</dc:creator><pubDate>Fri, 06 May 2016 06:56:00 -0400</pubDate><guid isPermaLink="false">tag:olinbg.com,2016-05-06:posts/ssh-key-github-bfw.html</guid></item></channel></rss>