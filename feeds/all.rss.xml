<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Olin Gay - Blog</title><link>http://olinbg.com/</link><description></description><lastBuildDate>Sun, 07 Aug 2016 09:14:00 -0400</lastBuildDate><item><title>Python and Flask - Hello World</title><link>http://olinbg.com/posts/python-and-flask-hello-world.html</link><description>&lt;p&gt;Python has a number of capable web frameworks, with &lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt; being the larger / "batteries included" option of the, and &lt;a href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt; being the smaller / "assembly required" choice.  As with many projects in Python, I start with the &lt;a href="http://docs.python-guide.org/en/latest/scenarios/web/"&gt;Hitchhiker's Guide to Python&lt;/a&gt;.  Here are two quotes from the site on picking a web framework:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The majority of new Python web applications today are built with Django.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;and...&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Flask is default choice for any Python web application that isnâ€™t a good fit for Django.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So from a quick start and learning perspective, I'm using Flask - purely a learning exercise.  I'm also going to use VS Code for the project so screenshots and info will be from there.  You can download VS Code for free &lt;a href="https://code.visualstudio.com/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Getting up and running&lt;/h2&gt;
&lt;p&gt;You'll want a python virtualenv before you start.  Since I'm running on an &lt;a href="https://docs.continuum.io/anaconda/"&gt;Anaconda&lt;/a&gt; installation on windows, I'm going to install flask with a conda command, rather than pip.  Both are below:&lt;/p&gt;
&lt;p&gt;Conda:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;conda install flask
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pip:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install flask
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now that flask is installed, I loaded up a new folder for scripts in VS Code, and created a main.py with this block (straight from the Flask docs):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello World!&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Screenshot:&lt;/p&gt;
&lt;p&gt;&lt;img alt="main.py" src="https://photos.smugmug.com/photos/i-xt677KF/1/O/i-xt677KF.png" /&gt;&lt;/p&gt;
&lt;p&gt;Once you run the program, you can navigate to the page in your browser:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Hello World" src="https://photos.smugmug.com/photos/i-TfsSVB3/0/O/i-TfsSVB3.png" /&gt;&lt;/p&gt;
&lt;p&gt;And you'll see this in the console:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
127.0.0.1 - - [07/Aug/2016 09:29:44] &amp;quot;GET / HTTP/1.1&amp;quot; 200 -
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Basic Flask setup, done.  Next up, some tutorials.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Olin Gay</dc:creator><pubDate>Sun, 07 Aug 2016 09:14:00 -0400</pubDate><guid isPermaLink="false">tag:olinbg.com,2016-08-07:posts/python-and-flask-hello-world.html</guid></item><item><title>Uninstall and Reinstall Bash for Windows</title><link>http://olinbg.com/posts/uninstall-reinstall-bfw.html</link><description>&lt;p&gt;After the most recent update for Bash for Windows, a fairly major change went into effect: you're now logged in with a "user" level account rather than "root".  This has major benefits, and works much more like any other Linux/Unix install that you'd run locally.&lt;/p&gt;
&lt;h2&gt;Early Adopters Used &lt;em&gt;root&lt;/em&gt;, not &lt;em&gt;user&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Some of the original components that I had installed under root were now not manageable by the user account - notably the Python 2.7 and 3.4 installs.  Switching back and forth to root was possible, but onerous.  Here's the command to change the default login for the Linux Sub-system (LXSS) run in PowerShell:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;PS C:\Windows\System32\WindowsPowerShell\v1.0&amp;gt; lxrun
Performs administrative operations on the LX subsystem

...
    /setdefaultuser - Configures the subsystem user that bash will be launched as. If the user does not exist it will be created.
        Optional arguments:
            username - Supply the username
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This didn't seem sustainable long-term, and I preferred to start "fresh" with a user-mode Ubuntu image from the start.  So I did some digging on uninstalling and reinstalling the LXSS.&lt;/p&gt;
&lt;h2&gt;Uninstalling Bash for Windows&lt;/h2&gt;
&lt;p&gt;First some links:&lt;/p&gt;
&lt;p&gt;The initial GitHub issue: &lt;a href="https://github.com/Microsoft/BashOnWindows/issues/4"&gt;Reinstalling clean image #4&lt;/a&gt;
The Lxss command reference: &lt;a href="https://msdn.microsoft.com/en-us/commandline/wsl/reference?f=255&amp;amp;MSPPError=-2147217396"&gt;Command Reference&lt;/a&gt;
User support documentation within Bash for Windows: &lt;a href="https://msdn.microsoft.com/en-us/commandline/wsl/user_support"&gt;User Support&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After reviewing, the key commands to execute were first to uninstall completely (instead of just removing the user install), and then reinstalling.&lt;/p&gt;
&lt;p&gt;First, the uninstall:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;PS C:\Windows\System32\WindowsPowerShell\v1.0&amp;gt; lxrun /uninstall /full
This will uninstall Ubuntu on Windows.
This will remove the Ubuntu environment as well as any modifications, new applications, and user data.
Type &amp;quot;y&amp;quot; to continue: y
Uninstalling...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can confirm the directory has been removed by trying to open the path &lt;code&gt;%USERPROFILE%\AppData\Local\Lxss&lt;/code&gt; - it should fail.&lt;/p&gt;
&lt;h2&gt;Re-installing Bash for Windows&lt;/h2&gt;
&lt;p&gt;The reinstall was very simple - simply run a similar Lxss command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;PS C:\Windows\System32\WindowsPowerShell\v1.0&amp;gt; lxrun /install
-- Beta feature --
This will install Ubuntu on Windows, distributed by Canonical
and licensed under its terms available here:
https://aka.ms/uowterms

Type &amp;quot;y&amp;quot; to continue: y
Downloading from the Windows Store... 100%
Extracting filesystem, this will take a few minutes...
Please create a default UNIX user account. The username does not need to match your Windows username.
For more information visit: https://aka.ms/wslusers
Enter new UNIX username: &amp;lt;user&amp;gt;
Enter new UNIX password:
Retype new UNIX password:
passwd: password updated successfully
Installation successful!
PS C:\Windows\System32\WindowsPowerShell\v1.0&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In my case, most files were mounted in a C: folder, so I just need to reconfigure Python and other installs.  To see those steps, check out &lt;a href="http://olinbg.com/posts/pelican-python-bash.html"&gt;this post&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Olin Gay</dc:creator><pubDate>Sun, 31 Jul 2016 07:51:00 -0400</pubDate><guid isPermaLink="false">tag:olinbg.com,2016-07-31:posts/uninstall-reinstall-bfw.html</guid></item><item><title>Running zsh in Bash for Windows</title><link>http://olinbg.com/posts/zsh-in-bfw.html</link><description>&lt;p&gt;&lt;a href="http://zsh.org"&gt;zsh&lt;/a&gt; is my favorite shell.  I also use the &lt;a href="https://github.com/robbyrussell/oh-my-zsh"&gt;oh-my-zsh&lt;/a&gt; plugin to get sane defaults and a slew of community-written plugins.  Obviously shell choice is very personal, but getting zsh running on &lt;a href="https://github.com/Microsoft/BashOnWindows"&gt;Bash for Windows&lt;/a&gt; was a priority for me.&lt;/p&gt;
&lt;p&gt;Since Bash for Windows is just getting off the ground, &lt;a href="https://github.com/Microsoft/BashOnWindows/issues/91"&gt;this GitHub issue&lt;/a&gt; was tracking issues with zsh running.  Now that it's been closed, you can start running zsh on Windows.&lt;/p&gt;
&lt;h2&gt;Installing zsh&lt;/h2&gt;
&lt;p&gt;First, ensure your Windows Preview build is up to date.&lt;/p&gt;
&lt;p&gt;Then install zsh from your Bash prompt:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install zsh
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Running zsh&lt;/h2&gt;
&lt;p&gt;Now, sitting at a bash prompt, run zsh:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;zsh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You'll be presented with a series of menus to setup zsh.  You can take the defaults if you're installing oh-my-zsh, otherwise walk through the menus and choose your values.&lt;/p&gt;
&lt;p&gt;Once done with configuration, you'll see this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;The code added to ~/.zshrc is marked by the lines
# Lines configured by zsh-newuser-install
# End of lines configured by zsh-newuser-install
You should not edit anything between these lines if you intend to
run zsh-newuser-install again.  You may, however, edit any other part
of the file.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;zsh is now setup, you can check with --version:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;zsh --version
zsh 5.0.2 (x86_64-pc-linux-gnu)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Installing oh-my-zsh&lt;/h2&gt;
&lt;p&gt;I don't usually run zsh without oh-my-zsh, so let's install that as well.&lt;/p&gt;
&lt;p&gt;You can see the full install guide &lt;a href="https://github.com/robbyrussell/oh-my-zsh"&gt;here&lt;/a&gt;, but here's the basic command to run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sh -c &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should see a message that your existing .zshrc has been replaces by oh-my-zsh:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Looking for an existing zsh config...
Found ~/.zshrc. Backing up to ~/.zshrc.pre-oh-my-zsh
Using the Oh My Zsh template file and adding it to ~/.zshrc
Copying your current PATH and adding it to the end of ~/.zshrc for you.
Time to change your default shell to zsh!
Password: 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Enter your password, and you'll see a block text "oh-my-zsh" confirming you're ready to go.&lt;/p&gt;
&lt;h2&gt;Change the color scheme for oh-my-zsh&lt;/h2&gt;
&lt;p&gt;It's quick and easy to change your theme for oh-my-zsh.&lt;/p&gt;
&lt;p&gt;First, check out &lt;a href="https://github.com/robbyrussell/oh-my-zsh/wiki/themes"&gt;the list of themes here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Then, open your ~/.zshrc file and change the theme entry to the theme you want:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vim ~/.zshrc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You'll see the theme section near the top.  Save, close, and restart zsh to see the color changes.&lt;/p&gt;
&lt;h2&gt;Change your default shell to zsh&lt;/h2&gt;
&lt;p&gt;This is the last step - making zsh the default shell.  Oh Bash for Windows, given it's pre-release software, we want to make sure we can revert to the bash shell easily.&lt;/p&gt;
&lt;p&gt;To set this up, open your .bashrc file in vim:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vim ~/.bashrc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Make the last line in the file this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;exec zsh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;...and save.  The next time you start Bash for Windows, it will become ZSH for Windows before starting.&lt;/p&gt;
&lt;p&gt;To revert the change, comment out the line above from your .bashrc file.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Olin Gay</dc:creator><pubDate>Mon, 30 May 2016 07:27:00 -0400</pubDate><guid isPermaLink="false">tag:olinbg.com,2016-05-30:posts/zsh-in-bfw.html</guid></item><item><title>Bash for Windows: Build 14342</title><link>http://olinbg.com/posts/bfw-build-14342.html</link><description>&lt;p&gt;The Windows team announced a new Insider build a few days ago &lt;a href="https://blogs.windows.com/windowsexperience/2016/05/10/announcing-windows-10-insider-preview-build-14342/"&gt;on their blog&lt;/a&gt;.  There's an even better breakdown on the &lt;a href="https://msdn.microsoft.com/en-us/commandline/wsl/release_notes"&gt;Bash for Windows site&lt;/a&gt;.  This is a great update, here are a few highlights:&lt;/p&gt;
&lt;h2&gt;Symlinks are now working&lt;/h2&gt;
&lt;p&gt;From the notes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Enabled symlinks in DriveFs (/mnt/) directories
Symlinks now work between DriveFs and VolFs
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I had immediately seen errors with symlinks after I started using Bash for Windows.  Doing simple things, like installing packages and creating Python virtual environments, failed in many scenarios.  I knew these issues were reported and tracked, so it's great to see this addressed in this build.&lt;/p&gt;
&lt;h2&gt;ZSH shell is now available&lt;/h2&gt;
&lt;p&gt;I have been following &lt;a href="https://github.com/Microsoft/BashOnWindows/issues/91"&gt;this long GitHub issue&lt;/a&gt; as I'm a ZSH user both at work and on my Mac.  Shell choice is a personal thing, but for me, this will mean only one set of syntax rules to learn.  Oh, and don't forget &lt;a href="https://github.com/robbyrussell/oh-my-zsh"&gt;Oh My Zsh&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Syscall improvements&lt;/h2&gt;
&lt;p&gt;One of the best part of the Bash for Windows implementation is how native it feels.  In order to improve the experience further over time, more syscalls need to be ported and available in WSL.  This release saw another set of syscalls implemented, and previous patch notes also had similar lists.&lt;/p&gt;
&lt;h2&gt;Warning: ".." failing in some cases&lt;/h2&gt;
&lt;p&gt;I noticed an issue when running Pelican that copying files was failing.  It turns out that in certain cases, following ".." in Bash for Windows can fail currently.  This is a known issue that will be fixed in a future build.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Olin Gay</dc:creator><pubDate>Mon, 16 May 2016 21:27:00 -0400</pubDate><guid isPermaLink="false">tag:olinbg.com,2016-05-16:posts/bfw-build-14342.html</guid></item><item><title>Setting Timezone in Bash for Windows</title><link>http://olinbg.com/posts/timezone-in-bfw.html</link><description>&lt;p&gt;Really quick and easy change, but one that didn't work correctly on my &lt;a href="http://olinbg.com/posts/pelican-python-bash.html"&gt;initial Bash for Windows install&lt;/a&gt; - timezone!&lt;/p&gt;
&lt;p&gt;Initially I was getting UTC from &lt;em&gt;date&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;date &amp;quot;+%Y-%m-%d %H:%M:%S&amp;quot;
2016-05-14 11:11:00
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A single link will allow Bash For Windows to pick up the right timezone.  In my case, I'm looking for EST (New York):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo ln -sf /usr/share/zoneinfo/America/New_York /etc/localtime
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Running date again:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;date &amp;quot;+%Y-%m-%d %H:%M:%S&amp;quot;
2016-05-14 07:12:21
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To see the other timezones available:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd /usr/share/zoneinfo
ls -l
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Olin Gay</dc:creator><pubDate>Sat, 14 May 2016 07:08:00 -0400</pubDate><guid isPermaLink="false">tag:olinbg.com,2016-05-14:posts/timezone-in-bfw.html</guid></item><item><title>Publish Pelican to GitHub from Bash for Windows</title><link>http://olinbg.com/posts/pelican-to-gh-bfw.html</link><description>&lt;p&gt;&lt;em&gt;(You probably want to review &lt;a href="http://olinbg.com/posts/pelican-python-bash.html"&gt;my earlier post on setting up Python and Pelican&lt;/a&gt;, and if you haven't already, &lt;a href="http://olinbg.com/posts/ssh-key-github-bfw.html"&gt;set up ssh keys as well&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There are a number of places to publish a Pelican site, but I was immediately drawn to &lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Free to use&lt;/li&gt;
&lt;li&gt;Integrates with your existing Github account&lt;/li&gt;
&lt;li&gt;Natively supports static sites, like Jekyll and Pelican&lt;/li&gt;
&lt;li&gt;Easy to automate on the command line&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;a href="http://docs.getpelican.com/en/latest/quickstart.html"&gt;documentation quickstart for Pelican&lt;/a&gt; helps you get a site built.  But how do you publish this site up to github pages?&lt;/p&gt;
&lt;h3&gt;Ensure the site builds and displays&lt;/h3&gt;
&lt;p&gt;Fire up Bash for Windows and change to your site directory.  Assuming you're using the makefile, run &lt;em&gt;make server&lt;/em&gt; to create your output directory and load it in your local browser.  For my site:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd olinbg
make serve
(site is now running at http://localhost:8000)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If &lt;a href="http://localhost:8000"&gt;the localhost link renders&lt;/a&gt;, you're ready to upload.&lt;/p&gt;
&lt;h3&gt;Create the repo&lt;/h3&gt;
&lt;p&gt;Start with the guide right on the &lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt; site.  From their current guide:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Create a repo" src="http://olinbg.com/images/2016-05-14/repo.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Initial push&lt;/h3&gt;
&lt;p&gt;Before you push all the content, copy your site content into the &lt;em&gt;username.github.io&lt;/em&gt; directory, then push the content.  In Bash for Windows (replace &lt;em&gt;username&lt;/em&gt; and &lt;em&gt;your_pelican_output_dir&lt;/em&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cp -r output username.github.io
cd username.github.io
git add --all
git commit -m &amp;quot;Initial commit&amp;quot;
git push -u origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Edit description&lt;/h3&gt;
&lt;p&gt;After pushing your first content, head over to your repo on github.  You'll see a github pages header where you can set a description and site address (should match your address from earlier):&lt;/p&gt;
&lt;p&gt;&lt;img alt="Edit" src="http://olinbg.com/images/2016-05-14/edit.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Test the page&lt;/h3&gt;
&lt;p&gt;Now navigate to the actual page: &lt;em&gt;username.github.io&lt;/em&gt;.  You should see your start Pelican content.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Site" src="http://olinbg.com/images/2016-05-14/site.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Adding a README&lt;/h3&gt;
&lt;p&gt;I wanted to ensure my github repo had a README added (standard practice).  Rather than ignore this in the output directory that's uploaded to github, I added this as file to copy in my pelicanconf.py:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir content/files
touch content/files/README.md
(edit the README with content)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now add the following to your pelican configuration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;EXTRA_PATH_METADATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;files/README.md&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;README.md&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Uploading your 'content' directory&lt;/h3&gt;
&lt;p&gt;You can follow similar steps using git to upload your 'content' folder.  This is advisable so you have a working repo as you edit your site.  Instructions are more straightforward here - simply create a new repo for you source content, and follow the "Initial push" instructions above.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Olin Gay</dc:creator><pubDate>Sat, 14 May 2016 06:37:00 -0400</pubDate><guid isPermaLink="false">tag:olinbg.com,2016-05-14:posts/pelican-to-gh-bfw.html</guid></item><item><title>Helpful Pelican Settings</title><link>http://olinbg.com/posts/helpful-pelican-settings.html</link><description>&lt;p&gt;Pelican (the static site generator that powers this site) has a number of useful settings that can change how sites are generated and displayed.  A few of these I didn't find right away - they might've been missing from pelican-quickstart or not obviously documented.  In no particular order:&lt;/p&gt;
&lt;h3&gt;EXTRA_PATH_METADATA&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Values used on this site&lt;/span&gt;
&lt;span class="n"&gt;EXTRA_PATH_METADATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;files/github/.nojekyll&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.nojekyll&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;files/github/CNAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;CNAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;files/github/README.md&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;README.md&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This setting allows you to copy either paths or files directly into your output directory in Pelican.  This solves an important problem when using static hosting on sites like github pages: maintaining repository files as your site generates.&lt;/p&gt;
&lt;p&gt;In the example above, the &lt;em&gt;CNAME&lt;/em&gt;, &lt;em&gt;README&lt;/em&gt; and &lt;em&gt;.nojekyll&lt;/em&gt; configuration files are copied into the top output directory.  I can then commit those on uplaod to gh-pages.&lt;/p&gt;
&lt;h3&gt;ARTICLE_URL and ARTICLE_SAVE_AS&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Values used on this site&lt;/span&gt;
&lt;span class="n"&gt;ARTICLE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;posts/{slug}.html&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;ARTICLE_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;posts/{slug}.html&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I wasn't as pleased with the output format of the default pelican setup, which dumps posts into the top-level directory.  The example formats the posts into a 'posts' directory using &lt;em&gt;ARTICLE_URL&lt;/em&gt;, keeping the top-level cleaner.  You could also add YYYYMMDD or tags into the post path here, and &lt;em&gt;SAVE_AS&lt;/em&gt; variant can change the location of the output file.&lt;/p&gt;
&lt;h3&gt;DELETE_OUTPUT_DIRECTORY and OUTPUT_RETENTION&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;DELETE_OUTPUT_DIRECTORY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;OUTPUT_RETENTION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.git&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.gitignore&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To ensure a clean build before publishing, you can use &lt;em&gt;DELETE_OUTPUT_DIRECTORY&lt;/em&gt;.  However, this was wiping out my .git directory each time.  I tracked down the &lt;em&gt;OUTPUT_RETENTION&lt;/em&gt; setting, that ensures on delete the files / paths listed stay intact.&lt;/p&gt;
&lt;h3&gt;FEED_ALL_RSS&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;FEED_ALL_RSS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;feeds/all.rss.xml&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The Pelican install by default had only enabled an ATOM feed, but not RSS.  The &lt;em&gt;FEED_ALL_RSS&lt;/em&gt; setting does what it says, generating the feed in the path provided.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Olin Gay</dc:creator><pubDate>Thu, 12 May 2016 22:52:00 -0400</pubDate><guid isPermaLink="false">tag:olinbg.com,2016-05-12:posts/helpful-pelican-settings.html</guid></item><item><title>Python and Pelican on Bash for Windows</title><link>http://olinbg.com/posts/pelican-python-bash.html</link><description>&lt;p&gt;This site is up and running after setting up &lt;a href="https://msdn.microsoft.com/en-us/commandline/wsl/about"&gt;Bash for Ubuntu for Windows&lt;/a&gt; and &lt;a href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;.  There are a few issues on Bash for Windows right now, but seeing Ubuntu's command-line capabilities on Windows 10 is eye-opening for long-time Windows users.&lt;/p&gt;
&lt;h2&gt;Installing Bash for Windows&lt;/h2&gt;
&lt;p&gt;You'll need &lt;a href="https://insider.windows.com/"&gt;Windows Insider&lt;/a&gt; enabled on Windows 10 64-bit, and also &lt;a href="https://msdn.microsoft.com/en-us/windows/uwp/get-started/enable-your-device-for-development"&gt;developer features&lt;/a&gt; set for Windows updates.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://stackoverflow.com/questions/36352627/how-to-enable-bash-in-windows-10-developer-preview"&gt;This post on StackOverflow&lt;/a&gt; was also helpful.&lt;/p&gt;
&lt;p&gt;You should now have the right Windows build (at least 14316):&lt;/p&gt;
&lt;p&gt;&lt;img alt="About" src="http://olinbg.com/images/2016-05-06/about.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Windows Build" src="http://olinbg.com/images/2016-05-06/build.png" /&gt;&lt;/p&gt;
&lt;p&gt;The Bash subsystem installation is straightforward.  I followed Microsoft's guide &lt;a href="https://blogs.msdn.microsoft.com/commandline/2016/04/06/bash-on-ubuntu-on-windows-download-now-3/"&gt;here&lt;/a&gt;, on the Windows Command Line blog.&lt;/p&gt;
&lt;p&gt;Fire up Bash, and you've got a blinking cursor.&lt;/p&gt;
&lt;h2&gt;Installing Python&lt;/h2&gt;
&lt;p&gt;The Python installation is far less involved, though you'll need to install directly (sudo apt-get) rather than using a virtual environment.  This is due to an issue around symlinks in Bash for Windows (details are &lt;a href="https://github.com/Microsoft/BashOnWindows/issues/201"&gt;here&lt;/a&gt;).  &lt;strong&gt;UPDATE&lt;/strong&gt; - looks like the fix is in the latest build, give it a shot!&lt;/p&gt;
&lt;p&gt;The following command gets python and pip up and running.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install python3-pip
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Similar for git:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The magic of Bash for windows - no Cygwin installation required here.&lt;/p&gt;
&lt;h2&gt;Installing Pelican&lt;/h2&gt;
&lt;p&gt;If you're interested in Pelican, the installation should also be easy with python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo pip install pelican markdown six
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, &lt;em&gt;this didn't work in Bash for Windows&lt;/em&gt;, again due to issues around filesystem errors and links (&lt;a href="http://stackoverflow.com/questions/36842969/python-3-pip-packages-install-on-ubuntu-on-windows-failing-with-errno-22"&gt;this StackOverflow&lt;/a&gt; got closest to my issue).&lt;/p&gt;
&lt;p&gt;What ended up working is running each of the install commands individually, because the packaging step at the end is failing.  It's a major hack, but got me up and running for now.  If this isn't addressed in the next developer build, I'll file an issue for it.&lt;/p&gt;
&lt;p&gt;Once Pelican is up and running, I recommend the &lt;a href="http://docs.getpelican.com/en/latest/quickstart.html"&gt;documentation quickstart&lt;/a&gt; as a first step.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Olin Gay</dc:creator><pubDate>Fri, 06 May 2016 18:40:00 -0400</pubDate><guid isPermaLink="false">tag:olinbg.com,2016-05-06:posts/pelican-python-bash.html</guid></item><item><title>Generating SSH Keys for Github on Bash for Windows</title><link>http://olinbg.com/posts/ssh-key-github-bfw.html</link><description>&lt;p&gt;If you'd rather not share SSH keys between your standard Windows installation and Bash for Windows, you can use the built-in key generator from Ubuntu to generate your ssh keys.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh-keygen -t rsa
Generating public/private rsa key pair.
Enter file in which to save the key (path): &amp;lt;type&amp;gt;
Enter passphrase (empty for no passphrase): &amp;lt;type&amp;gt;
Enter same passphrase again:
Your identification has been saved
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You'll have both a public and private key in your home directory.  If you want to upload your public key elsewhere, first dump it to the console (assuming you used the default path):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat ~/.ssh/id_rsa.pub
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You'll see:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh-rsa &amp;lt;key text&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Select everything before your machine name on the last line and press Ctrl+C to copy.  Open &lt;a href="https://github.com/settings/profile"&gt;your profile settings&lt;/a&gt; on GitHub, navigate to "SSH and GPG Keys", and paste in your ssh-rsa key:&lt;/p&gt;
&lt;p&gt;&lt;img alt="SSH settings in GitHub" src="http://olinbg.com/images/2016-05-06/github.png" /&gt;&lt;/p&gt;
&lt;p&gt;You'll get a notification that the key hasn't been used yet.  Clone a repo, and you're ready to go.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Olin Gay</dc:creator><pubDate>Fri, 06 May 2016 06:56:00 -0400</pubDate><guid isPermaLink="false">tag:olinbg.com,2016-05-06:posts/ssh-key-github-bfw.html</guid></item></channel></rss>